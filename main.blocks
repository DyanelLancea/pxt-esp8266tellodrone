<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="+u6SWSy]enV{{nCM7NpX" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="ZD2jl/|k~`)gtNI#/GXS"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace TelloControl {" line1="    // Initialize the variables" line2="    let telloIP = &quot;192.168.10.1&quot;;" line3="    let commandPort = 8889;" line4="" line5="    // Function to read and display response on the micro:bit" line6="    function readResponse(): void {" line7="        let response = serial.readString();" line8="        if (response.includes(&quot;OK&quot;)) {" line9="            basic.showString(&quot;Connected&quot;);" line10="        } else {" line11="            basic.showString(&quot;Failed&quot;);" line12="            basic.showString(response); // Display the actual error" line13="        }" line14="    }" line15="" line16="    function sendCommandToTello(command: string): void {" line17="        // Assuming you're already connected to Tello WiFi, have set up UDP connection and initialisd the Tello into SDK mode" line18="        sendAT(`AT+CIPSEND=${command.length}`, 500);  // Send command length and command" line19="        serial.writeString(command + &quot;\r\n&quot;); // Send the actual command" line20="        basic.pause(500);" line21="        readResponse(); // Display Tello's response" line22="    }" line23="" line24="    function sendAT(command: string, wait: number = 0) {" line25="        serial.writeString(`${command}\u000D\u000A`);" line26="        basic.pause(wait);" line27="    }" line28="" line29="    // Function to initialize ESP8266 and redirect serial communication" line30="    //% block=&quot;initialize ESP8266 with TX %tx| RX %rx&quot;" line31="    //% group=&quot;ESP8266&quot;" line32="    //% tx.defl=SerialPin.P8" line33="    //% rx.defl=SerialPin.P12" line34="    export function initESP8266(tx: SerialPin, rx: SerialPin): void {" line35="        serial.redirect(tx, rx, BaudRate.BaudRate115200); // Redirect TX and RX" line36="        //basic.pause(100);" line37="        sendAT(&quot;AT+CIPSTO:&lt;20000&gt;&quot;, 2000); // Reset the ESP8266" line38="        serial.setTxBufferSize(128);" line39="        serial.setRxBufferSize(128);" line40="" line41="        sendAT(&quot;AT+RST&quot;, 2000); // Reset the ESP8266" line42="        sendAT(&quot;AT+CWMODE=1&quot;, 500); // Set ESP8266 to Station Mode (STA mode)" line43="    }" line44="" line45="" line46="    //% block=&quot;Flip&quot;" line47="    //% group=&quot;Tello&quot;" line48="    export function flip(): void {" line49="        sendCommandToTello(&quot;flip b&quot;);" line50="    }" line51="" line52="    //% block=&quot;Emergency Stop&quot;" line53="    //% group=&quot;Tello&quot;" line54="    export function emergency(): void {" line55="        sendCommandToTello(&quot;emergency&quot;);" line56="    }" line57="" line58="    //% block=&quot;Move right&quot;" line59="    //% group=&quot;Tello&quot;" line60="    export function right(): void {" line61="        sendCommandToTello(&quot;right&quot;);" line62="    }" line63="" line64="    //% block=&quot;Move Left&quot;" line65="    //% group=&quot;Tello&quot;" line66="    export function left(): void {" line67="        sendCommandToTello(&quot;left&quot;);" line68="    }" line69="" line70="    //% block=&quot;Move Back&quot;" line71="    //% group=&quot;Tello&quot;" line72="    export function back(): void {" line73="        sendCommandToTello(&quot;back&quot;);" line74="    }" line75="" line76="    //% block=&quot;Move Forward&quot;" line77="    //% group=&quot;Tello&quot;" line78="    export function forward(): void {" line79="        sendCommandToTello(&quot;forward&quot;);" line80="    }" line81="" line82="    //% block=&quot;land&quot;" line83="    //% group=&quot;Tello&quot;" line84="    export function land(): void {" line85="        sendCommandToTello(&quot;land&quot;);" line86="    }" line87="" line88="    //% block=&quot;takeoff&quot;" line89="    //% group=&quot;Tello&quot;" line90="    export function takeOff(): void {" line91="        sendCommandToTello(&quot;takeoff&quot;);" line92="    }" line93="" line94="    //% block=&quot;Wi-Fi connected&quot;" line95="    //% group=&quot;ESP8266&quot;" line96="    export function isWiFiConnected(): boolean {" line97="        sendAT(&quot;AT+CWJAP?&quot;); // Checks the current Wi-Fi status" line98="        basic.pause(500); // Give time to get the response" line99="" line100="        let response2 = serial.readString(); // Reads response from ESP8266" line101="" line102="        if (response2.includes(&quot;No AP&quot;)) {" line103="            return false; // Not connected" line104="        } else if (response2.includes(&quot;OK&quot;) || response2.includes(&quot;Connected&quot;)) {" line105="            return true; // Connected" line106="        } else {" line107="            return false; // In case of other unexpected responses" line108="        }" line109="    }" line110="" line111="    // Seting up UDP connection (2) and initialise the Tello into SDK mode (3)" line112="    //% group=&quot;Tello&quot;" line113="    //% block=&quot;Initialise ESP and Tello connection&quot;" line114="    export function setupUDPConnection(): void {" line115="        sendAT(`AT+CIPSTART=&quot;UDP&quot;,&quot;${telloIP}&quot;,${commandPort}`, 500);" line116="        basic.pause(500); // Allow some time for connection setup" line117="        sendCommandToTello(&quot;command&quot;);" line118="        basic.pause(500); // Allow some time for connection setup" line119="    }" line120="" line121="    // Function to connect to Tello Wi-Fi (1)" line122="    //% group=&quot;Tello&quot;" line123="    //% block=&quot;connect to Tello Wi-Fi SSID %ssid&quot;" line124="    export function connectToWiFi(ssid: string): void {" line125="        sendAT(`AT+CWJAP=&quot;${ssid}&quot;,&quot;&quot;`, 5000); // No password is required" line126="        readResponse(); // Display response on micro:bit" line127="    }" line128="}" numlines="129"></mutation></block></statement></block></xml>